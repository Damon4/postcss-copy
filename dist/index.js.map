{"version":3,"sources":["../src/index.js"],"names":[],"mappings":"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","file":"index.js","sourcesContent":["import postcss from 'postcss';\nimport path from 'path';\nimport reduceFunctionCall from 'reduce-function-call';\nimport fs from 'fs-extra';\nimport url from 'url';\nimport crypto from 'crypto';\nimport pathExists from 'path-exists';\n\nconst tags = [\n    'assetsPath',\n    'path',\n    'name',\n    'hash',\n    'ext'\n];\n\n/**\n * return quote type\n *\n * @param  {String} string quoted (or not) value\n * @return {String} quote if any, or empty string\n */\nfunction getUrlMetaData(string) {\n    let quote = '';\n    const quotes = ['\\\"', '\\''];\n    const trimedString = string.trim();\n    quotes.forEach((q) => {\n        if (\n            trimedString.charAt(0) === q &&\n            trimedString.charAt(trimedString.length - 1) === q\n        ) {\n            quote = q;\n        }\n    });\n\n    const urlMeta = {\n        before: string.slice(0, string.indexOf(quote)),\n        quote: quote,\n        value: quote\n            ? trimedString.substr(1, trimedString.length - 2)\n            : trimedString,\n        after: string.slice(string.lastIndexOf(quote) + 1)\n    };\n    return urlMeta;\n}\n\n/**\n * Create an css url() from a path and a quote style\n *\n * @param {String} urlMeta url meta data\n * @param {String} newPath url path\n * @return {String} new url()\n */\nfunction createUrl(urlMeta, newPath) {\n    return 'url(' +\n        urlMeta.before +\n        urlMeta.quote +\n        (newPath || urlMeta.value) +\n        urlMeta.quote +\n        urlMeta.after +\n        ')';\n}\n\n/**\n * readFile\n *\n * function to try read the src file\n *\n * @param  {string} filepath\n * @return {contents|boolean}\n */\nfunction readFile(filepath) {\n    try {\n        return fs.readFileSync(filepath);\n    } catch (e) {\n        return false;\n    }\n}\n\n/**\n * getFileMeta\n *\n * Helper function that reads the file ang get some helpful information\n * to the copy process.\n *\n * @param  {string} dirname\n * @param  {string} value\n * @param  {Object} options\n * @return {Object} meta information from the resource\n */\nfunction getFileMeta(dirname, value, opts) {\n    const fileMeta = {};\n    const parseUrl = url.parse(path.resolve(dirname, value), true);\n    fileMeta.content = readFile(parseUrl.pathname);\n    if (!(fileMeta.content)) {\n        return false;\n    }\n    fileMeta.hash = opts.hashFunction(fileMeta.content);\n    fileMeta.fullName = path.basename(parseUrl.pathname);\n    // name without extension\n    fileMeta.name = path.basename(\n        parseUrl.pathname,\n        path.extname(parseUrl.pathname)\n    );\n    // extension without the '.'\n    fileMeta.ext = path.extname(parseUrl.pathname).replace('.', '');\n    // the absolute path without the #hash param\n    fileMeta.absolutePath = parseUrl.pathname;\n    // path between the basePath and the filename\n    fileMeta.path = fileMeta\n        .absolutePath\n        .replace(opts.src, '')\n        .replace(fileMeta.fullName, '')\n        .replace(/^\\/+|\\/+$/gm, '');\n    fileMeta.extra = (parseUrl.search ? parseUrl.search : '') +\n        (parseUrl.hash ? parseUrl.hash : '');\n    return fileMeta;\n}\n\n/**\n * processCopy\n *\n * @param {Object} result\n * @param {Object} urlMeta url meta data\n * @param {Object} options\n * @param {Object} decl postcss declaration\n * @return {String} new url\n */\nfunction processCopy(result, urlMeta, opts, decl) {\n    /**\n     * dirname of the read file css\n     * @type {String}\n     */\n    const dirname = decl.source && decl.source.input\n        ? path.dirname(decl.source.input.file)\n        : opts.src;\n\n    const fileMeta = getFileMeta(dirname, urlMeta.value, opts);\n    if (!(fileMeta)) {\n        result.warn('Can\\'t read file \\'' + urlMeta.value + '\\', ignoring', {\n            node: decl\n        });\n        return createUrl(urlMeta);\n    }\n\n    let tpl = opts.template;\n    tags.forEach((tag) => {\n        tpl = tpl.replace(\n            '[' + tag + ']',\n            fileMeta[tag] ? fileMeta[tag] : opts[tag]\n        );\n    });\n    const resultAbsolutePath = path.resolve(opts.dest, tpl);\n\n    if (!(pathExists.sync(resultAbsolutePath))) {\n        fs.outputFileSync(resultAbsolutePath, fileMeta.content);\n    }\n\n    const resultUrl = path.relative(\n        opts.keepRelativePath\n            ? dirname.replace(opts.src, opts.dest)\n            : opts.dest,\n        resultAbsolutePath\n    ) + fileMeta.extra;\n\n    return createUrl(urlMeta, resultUrl);\n}\n\n/**\n * Processes one declaration\n *\n * @param {Object} result\n * @param {Object} decl  postcss declaration\n * @param {Object} options plugin options\n * @return {void}\n */\nfunction processDecl(result, decl, opts) {\n    decl.value = reduceFunctionCall(decl.value, 'url', (value) => {\n        const urlMeta = getUrlMetaData(value);\n\n        // ignore absolute urls, hasshes or data uris\n        if (urlMeta.value.indexOf('/') === 0 ||\n            urlMeta.value.indexOf('data:') === 0 ||\n            urlMeta.value.indexOf('#') === 0 ||\n            /^[a-z]+:\\/\\//.test(urlMeta.value)\n        ) {\n            return createUrl(urlMeta);\n        }\n\n        return processCopy(result, urlMeta, opts, decl);\n    });\n}\n\n/**\n * Initialize the postcss-copy plugin\n * @param  {Object} plugin options\n * @return {void}\n *\n * userOpts = {\n * \t\tsrc: {String} optional\n * \t\tdest: {String} optional\n *      template: {String} optional (default '[assetsPath]/[hash].[ext]')\n * }\n */\nfunction init(userOpts = {}) {\n    const opts = {\n        assetsPath: 'assets',\n        template: '[assetsPath]/[hash].[ext]',\n        keepRelativePath: true,\n        hashFunction(content) {\n            return crypto.createHash('sha1')\n                .update(content)\n                .digest('hex')\n                .substr(0, 16);\n        }\n    };\n    Object.assign(opts, userOpts);\n\n    return (style, result) => {\n        if (opts.src) {\n            opts.src = path.resolve(opts.src);\n        } else {\n            opts.src = process.cwd();\n        }\n        if (opts.dest) {\n            opts.dest = path.resolve(opts.dest);\n        } else {\n            throw new Error('Option `dest` is required in postcss-copy');\n        }\n\n        style.walkDecls((decl) => {\n            if (decl.value && decl.value.indexOf('url(') > -1) {\n                processDecl(result, decl, opts);\n            }\n        });\n    };\n}\n\nexport default postcss.plugin('postcss-copy', init);\n"]}